"""remove_supplier_id_from_products

Revision ID: 49a283e30d62
Revises: ec4649f478a8
Create Date: 2025-07-31 19:26:21.943765

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision: str = '49a283e30d62'
down_revision: Union[str, None] = 'ec4649f478a8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    
    # verificación de llaves foraneas para eliminación
    tables = inspector.get_table_names()
    if 'products' in tables:
        columns = [col['name'] for col in inspector.get_columns('products')]
        
        fks = inspector.get_foreign_keys('products')
        fk_name = next(
            (fk['name'] for fk in fks 
             if fk['constrained_columns'] == ['supplier_id']),
            None
        )
        # Eliminar relación
        if fk_name:
            op.drop_constraint(fk_name, 'products', type_='foreignkey')
        # Eliminar la columna si existe
        if 'supplier_id' in columns:
            op.drop_column('products', 'supplier_id')
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Crear la columna de la llave foranea con valor null
    op.add_column(
        'products',
        sa.Column('supplier_id', sa.Integer(), nullable=True)
    )
    
    # Crear la llave foranea
    op.create_foreign_key(
        'products_supplier_id_fkey',
        'products', 'suppliers',
        ['supplier_id'], ['id']
    )

    # ### end Alembic commands ###


    
# Codigo original solo como referencia

# def upgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('products', schema=None) as batch_op:
#         batch_op.drop_constraint(batch_op.f('products_supplier_id_fkey'), type_='foreignkey')
#         batch_op.drop_column('supplier_id')

#     with op.batch_alter_table('suppliers', schema=None) as batch_op:
#         batch_op.alter_column('id',
#                existing_type=sa.INTEGER(),
#                nullable=True,
#                autoincrement=True,
#                existing_server_default=sa.text("nextval('suppliers_id_seq'::regclass)"))

#     # ### end Alembic commands ###


# def downgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('suppliers', schema=None) as batch_op:
#         batch_op.alter_column('id',
#                existing_type=sa.INTEGER(),
#                nullable=False,
#                autoincrement=True,
#                existing_server_default=sa.text("nextval('suppliers_id_seq'::regclass)"))

#     with op.batch_alter_table('products', schema=None) as batch_op:
#         batch_op.add_column(sa.Column('supplier_id', sa.INTEGER(), autoincrement=False, nullable=True))
#         batch_op.create_foreign_key(batch_op.f('products_supplier_id_fkey'), 'suppliers', ['supplier_id'], ['id'])

#     # ### end Alembic commands ###